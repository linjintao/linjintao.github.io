<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[MachinePlayer]]></title>
  <link href="http://linjintao.github.io/atom.xml" rel="self"/>
  <link href="http://linjintao.github.io/"/>
  <updated>2017-10-18T23:11:25+08:00</updated>
  <id>http://linjintao.github.io/</id>
  <author>
    <name><![CDATA[MachinePlayer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C++11 SFINAE]]></title>
    <link href="http://linjintao.github.io/blog/2017/10/18/c-plus-plus-11-sfinae/"/>
    <updated>2017-10-18T21:30:25+08:00</updated>
    <id>http://linjintao.github.io/blog/2017/10/18/c-plus-plus-11-sfinae</id>
    <content type="html"><![CDATA[<p><strong>Substitution Failure Is Not An Error</strong> refer to a situation in C++ when an invalid substitution of template parameters is not an error. It is a feature of C++ compiler, and some smart guys found it can be used to do some useful things, which make C++ behavior like a script language.</p>

<p>In Python we can check if an object has a attribute by <strong>hasattr(obj, attr)</strong>, if this attribute exists, then we can use it, or do something else. Now, we can implement the similar things with <strong>SFINAE</strong>.
The following codes show how we make it</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;type_traits&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// void template to accept other type</span>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="p">...</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="kt">void_t</span> <span class="o">=</span> <span class="kt">void</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// the second type is omittd to avoid warnning</span>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="o">=</span> <span class="kt">void_t</span><span class="o">&lt;&gt;</span> <span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="nl">has_inner_type</span> <span class="p">:</span> <span class="n">std</span><span class="o">::</span><span class="n">false_type</span><span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// this template has higher priority than previous one</span>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">has_inner_type</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="kt">void_t</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">::</span><span class="n">bar</span><span class="o">&gt;&gt;</span> <span class="o">:</span> <span class="n">std</span><span class="o">::</span><span class="n">true_type</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">Foo</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">using</span> <span class="n">bar</span> <span class="o">=</span> <span class="kt">int</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">str</span><span class="p">()</span> <span class="k">const</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="p">(</span><span class="s">&quot;foo&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="o">=</span> <span class="kt">void_t</span><span class="o">&lt;&gt;</span> <span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="nl">has_method_str</span> <span class="p">:</span> <span class="n">std</span><span class="o">::</span><span class="n">false_type</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">has_method_str</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="kt">void_t</span><span class="o">&lt;</span><span class="k">decltype</span><span class="p">(</span><span class="o">&amp;</span><span class="n">T</span><span class="o">::</span><span class="n">str</span><span class="p">)</span><span class="o">&gt;</span> <span class="o">&gt;:</span> <span class="n">std</span><span class="o">::</span><span class="n">true_type</span> <span class="p">{};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">typename</span> <span class="n">std</span><span class="o">::</span><span class="n">enable_if</span><span class="o">&lt;</span><span class="n">has_method_str</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">value</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;::</span><span class="n">type</span>
</span><span class='line'><span class="n">ToString</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">obj</span><span class="p">.</span><span class="n">str</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// The obj doesn&#39;t has method str will call this one</span>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">typename</span> <span class="n">std</span><span class="o">::</span><span class="n">enable_if</span><span class="o">&lt;!</span><span class="n">has_method_str</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;::</span><span class="n">value</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">string</span><span class="o">&gt;::</span><span class="n">type</span>
</span><span class='line'><span class="n">ToString</span><span class="p">(</span><span class="k">const</span> <span class="n">T</span> <span class="o">&amp;</span><span class="n">obj</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">to_string</span><span class="p">(</span><span class="n">obj</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">boolalpha</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Foo has inner type:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">has_inner_type</span><span class="o">&lt;</span><span class="n">Foo</span><span class="o">&gt;::</span><span class="n">value</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;int doesn&#39;t have inner type:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">has_inner_type</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;::</span><span class="n">value</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Call ToString with Foo:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">ToString</span><span class="p">(</span><span class="n">Foo</span><span class="p">())</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Call ToString with int:&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">ToString</span><span class="p">(</span><span class="mi">89</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The output is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="n">Foo</span> <span class="n">has</span> <span class="n">inner</span> <span class="nl">type</span><span class="p">:</span><span class="nb">true</span>
</span><span class='line'><span class="kt">int</span> <span class="n">doesn</span><span class="err">&#39;</span><span class="n">t</span> <span class="n">have</span> <span class="n">inner</span> <span class="nl">type</span><span class="p">:</span><span class="nb">false</span>
</span><span class='line'><span class="n">Call</span> <span class="n">ToString</span> <span class="n">with</span> <span class="nl">Foo</span><span class="p">:</span><span class="n">foo</span>
</span><span class='line'><span class="n">Call</span> <span class="n">ToString</span> <span class="n">with</span> <span class="kt">int</span><span class="o">:</span><span class="mi">89</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding Git]]></title>
    <link href="http://linjintao.github.io/blog/2017/09/13/understanding-git/"/>
    <updated>2017-09-13T23:34:25+08:00</updated>
    <id>http://linjintao.github.io/blog/2017/09/13/understanding-git</id>
    <content type="html"><![CDATA[<h2>Hello Word Guide</h2>

<p>Here is a great brief introduction about Git. You can learn the base knowledge about <a href="http://www.runoob.com/manual/git-guide/">Git</a> in 5 minutes.</p>

<blockquote><ul>
<li><a href="https://git-scm.com/docs">Git Documentation</a></li>
<li><a href="http://www.runoob.com/manual/github-git-cheat-sheet.pdf">Git Cheat Sheet</a></li>
</ul>
</blockquote>

<h2>Clone The Project</h2>

<p>To start coding, we need clone the project from server, we can use <strong>git clone</strong> to make a copy of the project src code.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://gitee.com/machineplayer/gitee_leetcode.git
</span><span class='line'>Cloning into 'gitee_leetcode'...</span></code></pre></td></tr></table></div></figure>


<h2>Branch Mange</h2>

<p>Now we have a folder named as <strong>gitee_leetcode</strong>, it is tracked by git. Normally, there is a default remote branch <strong>origin</strong>, and the main branch <strong>master</strong>. Use <strong>git branch -a</strong> to check the branch.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># -a , show all the branch
</span><span class='line'>$ git branch -a
</span><span class='line'>* master
</span><span class='line'>  remotes/origin/HEAD -&gt; origin/master
</span><span class='line'>  remotes/origin/master</span></code></pre></td></tr></table></div></figure>


<p>Before we start coding, we need a new branch, so that we could revert the changes. We can also give the branch a prefix or namespace.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git branch mybranch/FeatureA
</span><span class='line'>$ git checkout mybranch/FeatureA
</span><span class='line'>Switched to branch 'mybranch/FeatureA'
</span><span class='line'>$ git branch -a
</span><span class='line'>  master
</span><span class='line'>* mybranch/FeatureA
</span><span class='line'>  remotes/origin/HEAD -&gt; origin/master
</span><span class='line'>  remotes/origin/master
</span><span class='line'>
</span><span class='line'>$ git checkout master
</span><span class='line'>$ git merge mybranch/FeatureA</span></code></pre></td></tr></table></div></figure>


<p><strong>&lsquo;*&rsquo;</strong> means this branch is the current working branch. Now we add a new file, and commit it.</p>

<h2>Remote Branch</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add github https://github.com/machineplayer/gitee_leetcode.git
</span><span class='line'># -u, up stream, src_branch:dst_branch
</span><span class='line'>$ git push -u -f origin master:master
</span></code></pre></td></tr></table></div></figure>


<h2>Tracking The Change</h2>

<p>The following commands show how to add a file and commit it to current branch</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ echo "MIT license" &gt; license.txt
</span><span class='line'>$ git status
</span><span class='line'>On branch mybranch/FeatureA
</span><span class='line'>Untracked files:
</span><span class='line'>  (use "git add &lt;file&gt;..." to include in what will be committed)
</span><span class='line'>
</span><span class='line'>    license.txt
</span><span class='line'>$ git add license.txt
</span><span class='line'>$ git status
</span><span class='line'>On branch mybranch/FeatureA
</span><span class='line'>Changes to be committed:
</span><span class='line'>  (use "git reset HEAD &lt;file&gt;..." to unstage)
</span><span class='line'>
</span><span class='line'>    new file:   license.txt
</span><span class='line'># edit the file again and check the status
</span><span class='line'>$ echo "BSD license" &gt; license.txt
</span><span class='line'>$ git status
</span><span class='line'>On branch mybranch/FeatureA
</span><span class='line'>Changes to be committed:
</span><span class='line'>  (use "git reset HEAD &lt;file&gt;..." to unstage)
</span><span class='line'>
</span><span class='line'>    new file:   license.txt
</span><span class='line'>
</span><span class='line'>Changes not staged for commit:
</span><span class='line'>  (use "git add &lt;file&gt;..." to update what will be committed)
</span><span class='line'>  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)
</span><span class='line'>
</span><span class='line'>    modified:   license.txt
</span><span class='line'>$ git add license.txt & git commit -m "add and modify license"</span></code></pre></td></tr></table></div></figure>


<h2>The Three Trees</h2>

<table>
<thead>
<tr>
<th> Tree </th>
<th> Role </th>
</tr>
</thead>
<tbody>
<tr>
<td> Head </td>
<td> Last commit snapshot, next parent </td>
</tr>
<tr>
<td> Index </td>
<td> Proposed next commit snapshot </td>
</tr>
<tr>
<td> Working Directory </td>
<td> Sanbox </td>
</tr>
</tbody>
</table>


<h2>Revert The Change</h2>

<ul>
<li>revert branch &ndash; git reset [&ndash;soft|mix|hard] Head~2</li>
</ul>


<table>
<thead>
<tr>
<th> Option </th>
<th> Effect </th>
</tr>
</thead>
<tbody>
<tr>
<td> soft </td>
<td> only revert the Head tree </td>
</tr>
<tr>
<td> mix </td>
<td> Head tree and Index tree </td>
</tr>
<tr>
<td> hard </td>
<td> Head, Index and Working Directory </td>
</tr>
</tbody>
</table>


<ul>
<li>revert file &ndash; git checkout &ndash; filename.txt
This command will revert the change to the last <strong>git add</strong> or <strong>git commit</strong>. &ldquo;&ndash;&rdquo; is needed, otherwise filename is used as branch name.</li>
</ul>


<h2>Git Help</h2>

<p>The most useful command is <strong>git help</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git help reset</span></code></pre></td></tr></table></div></figure>


<blockquote><ul>
<li><a href="https://git-scm.com/book/zh/v2">Git Book</a></li>
<li><a href="https://git-scm.com/doc">Git Documentation</a></li>
</ul>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Build a Blog With Github Pages]]></title>
    <link href="http://linjintao.github.io/blog/2017/09/12/build-a-blog-with-github-pages/"/>
    <updated>2017-09-12T23:21:01+08:00</updated>
    <id>http://linjintao.github.io/blog/2017/09/12/build-a-blog-with-github-pages</id>
    <content type="html"><![CDATA[<h2>Requirements</h2>

<ul>
<li>Git</li>
<li>Ruby > 1.9.3</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># install Ruby package
</span><span class='line'>gem install bundle
</span><span class='line'>gem install bundler</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Octopress</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># install Octopress
</span><span class='line'>git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>cd octopress
</span><span class='line'>bundle install
</span><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<h2>Setup Github Pages</h2>

<ul>
<li>Make sure SSH keys has been added to your github account</li>
<li>Create a repo which must be named as your_github_name.github.io</li>
<li>Setup local repo, and push to remote repo</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages
</span><span class='line'># enter your github repo url
</span><span class='line'>https://github.com/your_username/your_username.github.io
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># generate static pages
</span><span class='line'>rake generate
</span><span class='line'># preview blog
</span><span class='line'>rake preview
</span><span class='line'># push to remote re
</span><span class='line'>po
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>


<h2>Add Custom Domain Name</h2>

<h4>Now you can acess your blog by <a href="https://yourname.github.io.">https://yourname.github.io.</a> You can also add your custom domain name</h4>

<ul>
<li>Goto your repo in github, and click setting, fill with your custon domain name</li>
<li>Add a CNAME : &ldquo;yourname.github.io&rdquo; to your DNS service provider</li>
</ul>


<h2>Customize Octopress</h2>

<ul>
<li>Add a page and post</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake new_page['page_name']
</span><span class='line'>rake new_post["Post Title"]</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
